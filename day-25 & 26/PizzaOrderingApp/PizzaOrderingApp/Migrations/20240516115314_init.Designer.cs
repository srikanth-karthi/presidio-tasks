// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PizzaOrderingApp.contexts;

#nullable disable

namespace PizzaOrderingApp.Migrations
{
    [DbContext(typeof(PizzaOrderingAppContext))]
    [Migration("20240516115314_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PizzaOrderingApp.Models.OrderItems", b =>
                {
                    b.Property<int>("OrderItemsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemsId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PizzaId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemsId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PizzaId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            OrderItemsId = 1,
                            OrderId = 1,
                            PizzaId = 1,
                            Price = 8.9900000000000002,
                            Quantity = 2
                        },
                        new
                        {
                            OrderItemsId = 2,
                            OrderId = 1,
                            PizzaId = 2,
                            Price = 10.99,
                            Quantity = 1
                        },
                        new
                        {
                            OrderItemsId = 3,
                            OrderId = 2,
                            PizzaId = 3,
                            Price = 9.9900000000000002,
                            Quantity = 3
                        });
                });

            modelBuilder.Entity("PizzaOrderingApp.Models.Orders", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            TotalPrice = 19.98,
                            UserId = 1
                        },
                        new
                        {
                            OrderId = 2,
                            TotalPrice = 15.99,
                            UserId = 2
                        },
                        new
                        {
                            OrderId = 3,
                            TotalPrice = 25.489999999999998,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("PizzaOrderingApp.Models.Pizza", b =>
                {
                    b.Property<int>("PizzaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PizzaId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVegetarian")
                        .HasColumnType("bit");

                    b.Property<string>("PizzaFlavour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PizzaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Stock")
                        .HasColumnType("float");

                    b.HasKey("PizzaId");

                    b.ToTable("Pizzas");

                    b.HasData(
                        new
                        {
                            PizzaId = 1,
                            Description = "A classic pizza with simple and delicious flavors.",
                            IsVegetarian = true,
                            PizzaFlavour = "Classic tomato, basil, mozzarella",
                            PizzaName = "Margherita",
                            Price = 8.9900000000000002,
                            Stock = 100.0
                        },
                        new
                        {
                            PizzaId = 2,
                            Description = "A classic favorite with spicy pepperoni slices.",
                            IsVegetarian = false,
                            PizzaFlavour = "Pepperoni, mozzarella",
                            PizzaName = "Pepperoni",
                            Price = 10.99,
                            Stock = 80.0
                        },
                        new
                        {
                            PizzaId = 3,
                            Description = "A flavorful vegetarian option with a variety of vegetables.",
                            IsVegetarian = true,
                            PizzaFlavour = "Assorted vegetables, mozzarella",
                            PizzaName = "Vegetarian",
                            Price = 9.9900000000000002,
                            Stock = 70.0
                        },
                        new
                        {
                            PizzaId = 4,
                            Description = "A tropical delight with ham and pineapple toppings.",
                            IsVegetarian = false,
                            PizzaFlavour = "Ham, pineapple, mozzarella",
                            PizzaName = "Hawaiian",
                            Price = 11.99,
                            Stock = 0.0
                        },
                        new
                        {
                            PizzaId = 5,
                            Description = "A tangy BBQ flavor with grilled chicken and onions.",
                            IsVegetarian = false,
                            PizzaFlavour = "BBQ sauce, chicken, onions, mozzarella",
                            PizzaName = "BBQ Chicken",
                            Price = 12.99,
                            Stock = 50.0
                        },
                        new
                        {
                            PizzaId = 6,
                            Description = "A mushroom lover's dream with a variety of mushrooms.",
                            IsVegetarian = true,
                            PizzaFlavour = "Assorted mushrooms, mozzarella",
                            PizzaName = "Mushroom Lovers",
                            Price = 10.99,
                            Stock = 75.0
                        },
                        new
                        {
                            PizzaId = 7,
                            Description = "A meat lover's delight with a variety of meats.",
                            IsVegetarian = false,
                            PizzaFlavour = "Pepperoni, sausage, ham, bacon, mozzarella",
                            PizzaName = "Meat Feast",
                            Price = 13.99,
                            Stock = 0.0
                        },
                        new
                        {
                            PizzaId = 8,
                            Description = "A cheese lover's pizza with four different cheeses.",
                            IsVegetarian = true,
                            PizzaFlavour = "Mozzarella, cheddar, parmesan, provolone",
                            PizzaName = "Four Cheese",
                            Price = 11.99,
                            Stock = 65.0
                        },
                        new
                        {
                            PizzaId = 9,
                            Description = "An ultimate combination of toppings for a satisfying pizza.",
                            IsVegetarian = false,
                            PizzaFlavour = "Pepperoni, sausage, bell peppers, onions, olives, mozzarella",
                            PizzaName = "Supreme",
                            Price = 12.99,
                            Stock = 45.0
                        },
                        new
                        {
                            PizzaId = 10,
                            Description = "A flavorful pesto sauce with grilled chicken and tomatoes.",
                            IsVegetarian = false,
                            PizzaFlavour = "Pesto sauce, chicken, tomatoes, mozzarella",
                            PizzaName = "Pesto Chicken",
                            Price = 12.99,
                            Stock = 60.0
                        });
                });

            modelBuilder.Entity("PizzaOrderingApp.Models.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("HasCode")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "john.doe@example.com",
                            HasCode = new byte[0],
                            Name = "JohnDoe",
                            Password = new byte[0]
                        },
                        new
                        {
                            UserId = 2,
                            Email = "jane.smith@example.com",
                            HasCode = new byte[0],
                            Name = "JaneSmith",
                            Password = new byte[0]
                        },
                        new
                        {
                            UserId = 3,
                            Email = "alice.johnson@example.com",
                            HasCode = new byte[0],
                            Name = "AliceJohnson",
                            Password = new byte[0]
                        });
                });

            modelBuilder.Entity("PizzaOrderingApp.Models.OrderItems", b =>
                {
                    b.HasOne("PizzaOrderingApp.Models.Orders", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PizzaOrderingApp.Models.Pizza", "Pizza")
                        .WithMany("OrderItems")
                        .HasForeignKey("PizzaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Pizza");
                });

            modelBuilder.Entity("PizzaOrderingApp.Models.Orders", b =>
                {
                    b.HasOne("PizzaOrderingApp.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PizzaOrderingApp.Models.Orders", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("PizzaOrderingApp.Models.Pizza", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
